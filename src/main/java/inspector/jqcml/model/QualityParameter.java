package inspector.jqcml.model;

import inspector.jqcml.jaxb.adapters.ThresholdListAdapter;

import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MapKey;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.apache.commons.lang3.BooleanUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.eclipse.persistence.oxm.annotations.XmlPath;

/**
 * General parameter type. A quality parameter describes a certain parameter for the encompassing {@link QualityAssessment}.
 */
// JAXB
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name="qualityParameter")
@XmlType(name="qualityParameterType")
//JPA
@Entity
@Table(name="quality_parameter")
public class QualityParameter extends CvParameter {
	
	// JAXB
	@XmlTransient
	// JPA
	@Transient
	private static final Logger logger = LogManager.getLogger(QualityParameter.class);

	/** read-only qcDB primary key; generated by JPA */
	// JAXB
	@XmlTransient
	// JPA
	@Id
	@TableGenerator(name="pk_qp", table="pk_sequence", pkColumnName="name",
			valueColumnName="seq", pkColumnValue="quality_parameter", allocationSize=1)
	@GeneratedValue(strategy=GenerationType.TABLE, generator="pk_qp")
	@Column(name="QP_ID_PK")
	private int primaryKey;
	
	/** a unique identifier */
	// JAXB
	@XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name="ID")
	@XmlID
	@XmlAttribute(name="ID", required=true)
	// JPA
	@Column(name="id", length=255, unique=true)
	private String id;
	/** indicates if the parameter has exceeded a given threshold */
	// JAXB
	@XmlAttribute
	// JPA
	@Column(name="flag")
	private Boolean flag;
	/** contains the threshold information used for this parameter */
	// JAXB
	@XmlJavaTypeAdapter(ThresholdListAdapter.class)
	@XmlPath(".")
	// JPA
	@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER, mappedBy="parentParameter")
	@MapKey(name="accession")
	// key=accession, value=threshold
	private Map<String, Threshold> thresholds;
	
	/**
     * Constructs a new empty QualityParameter object.
     */
	public QualityParameter() {
		super();
		
		this.thresholds = new TreeMap<>();
	}
	
	/**
	 * Constructs a new QualityParameter object with the given name and id, and defined by the given {@link Cv} object.
	 * 
	 * @param name  The name of the parameter
	 * @param cvRef  The reference to the Cv object which defines this parameter
	 * @param id  The unique identifier for this parameter
	 */
	public QualityParameter(String name, Cv cvRef, String id) {
		super(name, cvRef);
		
		this.thresholds = new TreeMap<>();
		
		setId(id);
	}
	
	/**
	 * Returns the primary key of this QualityParameter object used in the qcDB.
	 * 
	 * The primary key is (generally) read-only; the qcDB implementation will generate a suitable primary key when required.
	 * If this QualityParameter object isn't connected to a certain qcDB, the primary key will not be set.
	 * 
	 * @return The primary key of this QualityParameter object
	 */
	public int getPrimaryKey() {
		return primaryKey;
	}
	
	/**
	 * Returns the unique identifier of this QualityParameter object.
	 * 
	 * @return  The ID of this QualityParameter object
	 */
	public String getId() {
		return id;
	}
	
	/**
	 * Sets the unique identifier of this QualityParameter object.
	 * 
	 * @param id  The ID of this QualityParameter object
	 */
	public void setId(String id) {
		this.id = id;
	}
	
	/**
	 * Returns whether or not this QualityParameter has exceeded the given {@link Threshold}(s).
	 * 
	 * @return True if this QualityParameter has exceeded the given Threshold(s), false if not
	 */
	public boolean hasFlag() {
		return BooleanUtils.isTrue(flag);
	}
	
	/**
	 * Indicate whether or not this QualityParameter has exceeded the given {@link Threshold}(s).
	 * 
	 * @param flag  Indication whether this QualityParameter has exceeded the given Threshold(s)
	 */
	public void setFlag(Boolean flag) {
		this.flag = flag;
	}
	
	/**
	 * Returns the number of {@link Threshold}s that associated with this QualityParameter object.
	 * 
	 * @return The number of Thresholds
	 */
	public int getNumberOfThresholds() {
		return thresholds.size();
	}

	/**
	 * Returns the {@link Threshold} specified by the given accession number.
	 * 
	 * @param accession  The accession number of the requested Threshold
	 * @return The Threshold specified by the given accession number if this Threshold is present, {@code null} otherwise
	 */
	public Threshold getThreshold(String accession) {
		if(accession != null)
			return thresholds.get(accession);
		else
			return null;
	}
	
	/**
	 * Returns a {@link Iterator} over all {@link Threshold}s associated with this QualityParameter object.
	 * 
	 * @return An Iterator over all Thresholds
	 */
	public Iterator<Threshold> getThresholdIterator() {
		return thresholds.values().iterator();
	}

	/**
	 * Associates a given {@link Threshold} with this QualityParameter object.
	 * 
	 * If a Threshold with the same accession number was already present, the old Threshold is replaced by the given Threshold.
	 * 
	 * @param threshold  The given Threshold
	 */
	public void addThreshold(Threshold threshold) {
		if(threshold != null) {
			threshold.setParentQualityParameter(this);	// add the bi-directional relationship
			thresholds.put(threshold.getAccession(), threshold);
		}
		else {
			logger.error("Can't add <null> Threshold to a QualityParameter object");
			throw new NullPointerException("Can't add <null> Threshold");
		}
	}
	
	/**
	 * Removes the {@link Threshold} associated with this QualityParameter object, specified by the given accession number, from this QualityParameter object.
	 * 
	 * @param accession  The accession number of the Threshold that will be removed
	 */
	public void removeThreshold(String accession) {
		if(accession != null) {
			Threshold threshold = getThreshold(accession);
			if(threshold != null)	// remove the bi-directional relationship
				threshold.setParentQualityParameter(null);
			thresholds.remove(accession);
		}
	}
	
	/**
	 * Removes all {@link Threshold}s associated with this QualityParameter object, from this QualityParameter object.
	 */
	public void removeAllThresholds() {
		Iterator<Threshold> it = getThresholdIterator();
		while(it.hasNext()) {
			// first remove the bi-directional relationship
			Threshold threshold = it.next();
			threshold.setParentQualityParameter(null);
			// remove the QualityParameter
			it.remove();
		}
	}
	
	@Override
	public boolean equals(Object other) {
		if(other == null)
			return false;
		else if(other == this)
			return true;
		else if(!(other instanceof QualityParameter))
			return false;
		else {
			QualityParameter qpOther = (QualityParameter) other;
			boolean isEqual = true;
			if(getName() != null) isEqual &= getName().equals(qpOther.getName()); else isEqual &= qpOther.getName() == null;
			if(getDescription() != null) isEqual &= getDescription().equals(qpOther.getDescription()); else isEqual &= qpOther.getDescription() == null;
			if(getValue() != null) isEqual &= getValue().equals(qpOther.getValue()); else isEqual &= qpOther.getValue() == null;
			if(getUnitAccession() != null) isEqual &= getUnitAccession().equals(qpOther.getUnitAccession()); else isEqual &= qpOther.getUnitAccession() == null;
			if(getUnitName() != null) isEqual &= getUnitName().equals(qpOther.getUnitName()); else isEqual &= qpOther.getUnitName() == null;
			if(getUnitCvRef() != null) isEqual &= getUnitCvRef().equals(qpOther.getUnitCvRef()); else isEqual &= qpOther.getUnitCvRef() == null;
			if(getCvRef() != null) isEqual &= getCvRef().equals(qpOther.getCvRef()); else isEqual &= qpOther.getCvRef() == null;
			if(getAccession() != null) isEqual &= getAccession().equals(qpOther.getAccession()); else isEqual &= qpOther.getAccession() == null;
			if(getId() != null) isEqual &= getId().equals(qpOther.getId()); else isEqual &= qpOther.getId() == null;
            isEqual &= hasFlag() == qpOther.hasFlag();
			isEqual &= getNumberOfThresholds() == qpOther.getNumberOfThresholds();
            for(Iterator<Threshold> it = getThresholdIterator(); it.hasNext(); ) {
                Threshold th = it.next();
                isEqual &= th.equals(qpOther.getThreshold(th.getAccession()));
            }

			return isEqual;
		}
	}
	
	@Override
	public String toString() {
		return "qualityParameter <ID=\"" + getId() + "\" name=\"" + getName() + "\" value=\"" + getValue() + "\">";
	}
	
	

}
