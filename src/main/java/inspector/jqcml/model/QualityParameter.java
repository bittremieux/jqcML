package inspector.jqcml.model;

/*
 * #%L
 * jqcML
 * %%
 * Copyright (C) 2013 - 2015 InSPECtor
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import com.google.common.base.MoreObjects;
import inspector.jqcml.jaxb.adapters.ThresholdListAdapter;

import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MapKey;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.apache.commons.lang3.BooleanUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.eclipse.persistence.oxm.annotations.XmlPath;

/**
 * General parameter type. A quality parameter describes a certain parameter for the encompassing {@link QualityAssessment}.
 */
// JAXB
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name="qualityParameter")
@XmlType(name="QualityParameterType")
//JPA
@Entity
@Table(name="quality_parameter")
public class QualityParameter extends CvParameter {

    // JAXB
    @XmlTransient
    // JPA
    @Transient
    private static final Logger LOGGER = LogManager.getLogger(QualityParameter.class);

    /** read-only qcDB primary key; generated by JPA */
    // JAXB
    @XmlTransient
    // JPA
    @Id
    @TableGenerator(name="pk_qp", table="pk_sequence", pkColumnName="name",
            valueColumnName="seq", pkColumnValue="quality_parameter", allocationSize=1)
    @GeneratedValue(strategy=GenerationType.TABLE, generator="pk_qp")
    @Column(name="QP_ID_PK")
    private int primaryKey;

    /** a unique identifier */
    // JAXB
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name="ID")
    @XmlID
    @XmlAttribute(name="ID", required=true)
    // JPA
    @Column(name="id", length=255, unique=true)
    private String id;
    /** indicates if the parameter has exceeded a given threshold */
    // JAXB
    @XmlAttribute
    // JPA
    @Column(name="flag")
    private Boolean flag;
    /** contains the threshold information used for this parameter */
    // JAXB
    @XmlJavaTypeAdapter(ThresholdListAdapter.class)
    @XmlPath(".")
    // JPA
    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER, mappedBy="parentParameter")
    @MapKey(name="accession")
    // key=accession, value=threshold
    private Map<String, Threshold> thresholds;

    /**
     * Constructs a new empty QualityParameter object.
     */
    protected QualityParameter() {
        super();

        this.thresholds = new TreeMap<>();
    }

    /**
     * Constructs a new QualityParameter object with the given name and id, and defined by the given {@link Cv} object.
     *
     * @param name  The name of the parameter
     * @param cvRef  The reference to the Cv object which defines this parameter
     * @param accession  The accession number identifying this parameter in the controlled vocabulary
     * @param id  The unique identifier for this parameter
     */
    public QualityParameter(String name, Cv cvRef, String accession, String id) {
        super(name, cvRef, accession);

        this.thresholds = new TreeMap<>();
        setFlag(null);

        setId(id);
    }

    /**
     * Returns the primary key of this QualityParameter object used in the qcDB.
     *
     * The primary key is (generally) read-only; the qcDB implementation will generate a suitable primary key when required.
     * If this QualityParameter object isn't connected to a certain qcDB, the primary key will not be set.
     *
     * @return The primary key of this QualityParameter object
     */
    public int getPrimaryKey() {
        return primaryKey;
    }

    /**
     * Returns the unique identifier of this QualityParameter object.
     *
     * @return  The ID of this QualityParameter object
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the unique identifier of this QualityParameter object.
     *
     * @param id  The ID of this QualityParameter object
     */
    private void setId(String id) {
        this.id = id;
    }

    /**
     * Returns whether or not this QualityParameter has exceeded the given {@link Threshold}(s).
     *
     * @return True if this QualityParameter has exceeded the given Threshold(s), false if not
     */
    public boolean hasFlag() {
        return BooleanUtils.isTrue(flag);
    }

    /**
     * Indicate whether or not this QualityParameter has exceeded the given {@link Threshold}(s).
     *
     * @param flag  Indication whether this QualityParameter has exceeded the given Threshold(s)
     */
    public void setFlag(Boolean flag) {
        this.flag = flag;
    }

    /**
     * Returns the number of {@link Threshold}s that associated with this QualityParameter object.
     *
     * @return The number of Thresholds
     */
    public int getNumberOfThresholds() {
        return thresholds.size();
    }

    /**
     * Returns the {@link Threshold} specified by the given accession number.
     *
     * @param accession  The accession number of the requested Threshold
     * @return The Threshold specified by the given accession number if this Threshold is present, {@code null} otherwise
     */
    public Threshold getThreshold(String accession) {
        return accession != null ? thresholds.get(accession) : null;
    }

    /**
     * Returns a {@link Iterator} over all {@link Threshold}s associated with this QualityParameter object.
     *
     * @return An Iterator over all Thresholds
     */
    public Iterator<Threshold> getThresholdIterator() {
        return thresholds.values().iterator();
    }

    /**
     * Associates a given {@link Threshold} with this QualityParameter object.
     *
     * If a Threshold with the same accession number was already present, the old Threshold is replaced by the given Threshold.
     *
     * @param threshold  The given Threshold
     */
    public void addThreshold(Threshold threshold) {
        if(threshold != null) {
            // add the bi-directional relationship
            threshold.setParentQualityParameter(this);
            thresholds.put(threshold.getAccession(), threshold);
        } else {
            LOGGER.error("Can't add <null> Threshold to a QualityParameter object");
            throw new NullPointerException("Can't add <null> Threshold");
        }
    }

    /**
     * Removes the {@link Threshold} associated with this QualityParameter object, specified by the given accession number, from this QualityParameter object.
     *
     * @param accession  The accession number of the Threshold that will be removed
     */
    public void removeThreshold(String accession) {
        if(accession != null) {
            Threshold threshold = getThreshold(accession);
            if(threshold != null) {
                // remove the bi-directional relationship
                threshold.setParentQualityParameter(null);
            }
            thresholds.remove(accession);
        }
    }

    /**
     * Removes all {@link Threshold}s associated with this QualityParameter object, from this QualityParameter object.
     */
    public void removeAllThresholds() {
        Iterator<Threshold> it = getThresholdIterator();
        while(it.hasNext()) {
            // first remove the bi-directional relationship
            Threshold threshold = it.next();
            threshold.setParentQualityParameter(null);
            // remove the QualityParameter
            it.remove();
        }
    }

    @Override
    public String toString() {
        MoreObjects.ToStringHelper tsh = MoreObjects.toStringHelper(this).add("id", id).add("name", name)
                .add("accession", accession).add("value", value).add("unit name", unitName)
                .add("unit accession", unitAccession).add("description", description).add("threshold flag", flag);
        for(Iterator<Threshold> it = getThresholdIterator(); it.hasNext(); ) {
            tsh.add("threshold", it.next());
        }
        return tsh.omitNullValues().toString();
    }
}
