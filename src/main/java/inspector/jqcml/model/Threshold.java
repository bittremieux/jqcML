package inspector.jqcml.model;

import inspector.jqcml.jpa.customizer.ThresholdCustomizer;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.eclipse.persistence.annotations.Customizer;

/**
 * Contains threshold information for an associated {@link QualityParameter}.
 * This object is mainly used to refer to an external file containing the required data.
 */
//JAXB
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name="threshold")
//JPA
@Entity
@Customizer(ThresholdCustomizer.class)
@Table(name="threshold")
public class Threshold extends CvParameter {
	
	/** read-only qcDB primary key; generated by JPA */
	// JAXB
	@XmlTransient
	// JPA
	@Id
	@TableGenerator(name="pk_threshold", table="pk_sequence", pkColumnName="name",
			valueColumnName="seq", pkColumnValue="threshold", allocationSize=1)
	@GeneratedValue(strategy=GenerationType.TABLE, generator="pk_threshold")
	@Column(name="TH_ID_PK")
	private int primaryKey;
	
	/** refers to an external file containing threshold information */
	// JAXB
	@XmlJavaTypeAdapter(CollapsedStringAdapter.class)
	@XmlSchemaType(name="token")
	@XmlAttribute(name="thresholdFilename")
	// JPA
	@Column(length=45, name="threshold_filename")
	private String fileName;
	
	/** inverse part of the bi-directional relationship with {@link QualityParameter} */
	// JAXB
	@XmlTransient
	// JPA
	@ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="QP_ID_FK", referencedColumnName="QP_ID_PK")
    private QualityParameter parentParameter;

	/**
	 * Constructs a new empty Threshold object.
	 */
	public Threshold() {
		super();
	}

	/**
	 * Constructs a new Threshold object with the given name and defined by the given {@link Cv} object.
	 * 
	 * @param name  The name of the threshold
	 * @param cvRef  The reference to the Cv object which defines this threshold
	 */
	public Threshold(String name, Cv cvRef) {
		super(name, cvRef);
	}

	/**
	 * Returns the name of the (external) file containing the threshold information.
	 * 
	 * @return The name of the file containing the threshold information
	 */
	public String getFileName() {
		return fileName;
	}

	/**
	 * Sets the name of the (external) file containing the threshold information.
	 * @param fileName  The name of the file containing the threshold information
	 */
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}
	
	public void setParentQualityParameter(QualityParameter parent) {
		this.parentParameter = parent;
	}
	
	@Override
	public boolean equals(Object other) {
		if(other == null)
			return false;
		else if(other == this)
			return true;
		else if(!(other instanceof Threshold))
			return false;
		else {
			Threshold thrOther = (Threshold) other;
			boolean isEqual = true;
			if(getName() != null) isEqual &= getName().equals(thrOther.getName()); else isEqual &= thrOther.getName() == null;
			if(getValue() != null) isEqual &= getValue().equals(thrOther.getValue()); else isEqual &= thrOther.getValue() == null;
			if(getUnitAccession() != null) isEqual &= getUnitAccession().equals(thrOther.getUnitAccession()); else isEqual &= thrOther.getUnitAccession() == null;
			if(getUnitName() != null) isEqual &= getUnitName().equals(thrOther.getUnitName()); else isEqual &= thrOther.getUnitName() == null;
			if(getUnitCvRef() != null) isEqual &= getUnitCvRef().equals(thrOther.getUnitCvRef()); else isEqual &= thrOther.getUnitCvRef() == null;
			if(getCvRef() != null) isEqual &= getCvRef().equals(thrOther.getCvRef()); else isEqual &= thrOther.getCvRef() == null;
			if(getAccession() != null) isEqual &= getAccession().equals(thrOther.getAccession()); else isEqual &= thrOther.getAccession() == null;
			if(getFileName() != null) isEqual &= getFileName().equals(thrOther.getFileName()); else isEqual &= thrOther.getFileName() == null;

			return isEqual;
		}
	}
	
	@Override
	public String toString() {
		return "threshold <name=\"" + getName() + "\" file name=\"" + getFileName() + "\">";
	}

}
