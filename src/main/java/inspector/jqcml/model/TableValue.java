package inspector.jqcml.model;

/*
 * #%L
 * jqcML
 * %%
 * Copyright (C) 2013 - 2015 InSPECtor
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import com.google.common.base.MoreObjects;
import inspector.jqcml.jpa.customizer.TableValueTypeCustomizer;

import javax.persistence.*;
import javax.xml.bind.annotation.XmlTransient;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.eclipse.persistence.annotations.Customizer;

import java.util.Objects;

/**
 * Represents a single value in a {@link TableAttachment}, specified by a certain {@link TableColumn} and {@link TableRow}.
 */
@Entity
@Customizer(TableValueTypeCustomizer.class)
@Table(name = "table_value")
public class TableValue {

    // JAXB
    @XmlTransient
    // JPA
    @Transient
    private static final Logger LOGGER = LogManager.getLogger(TableValue.class);

    /** read-only qcDB primary key; generated by JPA */
    @Id
    @TableGenerator(name="pk_value", table="pk_sequence", pkColumnName="name",
            valueColumnName="seq", pkColumnValue="table_value", allocationSize=1)
    @GeneratedValue(strategy=GenerationType.TABLE, generator="pk_value")
    @Column(name="TV_ID_PK")
    private int primaryKey;

    /** the value in the table */
    @Column
    private String value;
    /** the type of the value: integer, double, or string */
    @Enumerated(EnumType.STRING)
    private TableValueType type;

    /** the {@link TableColumn} that contains this value */
    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="TC_ID_FK", referencedColumnName="TC_ID_PK")
    private TableColumn column;
    /** the {@link TableRow} that contains this value */
    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="TR_ID_FK", referencedColumnName="TR_ID_PK")
    private TableRow row;

    /**
     * Constructs a new empty TableValue object.
     */
    protected TableValue() {
        // do nothing
    }

    /**
     * Constructs a new TableValue object with the given value in the given column and row.
     *
     * @param column  the column that contains this value
     * @param row  the row that contains this value
     * @param value  the value
     */
    public TableValue(TableColumn column, TableRow row, String value) {
        setValue(value);
        setType();

        setColumn(column);
        setRow(row);

        column.addValue(this);
        row.addValue(this);
    }

    /**
     * Returns the value in this TableValue object.
     *
     * @return the value
     */
    public String getValue() {
        return value;
    }

    /**
     * Sets the value for this TableValue object.
     *
     * @param value  the value
     */
    private void setValue(String value) {
        this.value = value;
        setType();
    }

    public TableValueType getType() {
        return type;
    }

    /**
     * Determines and sets the type of the value in this TableValue object.
     */
    private void setType() {
        try {
            Integer.parseInt(value);
            this.type = TableValueType.INTEGER;
        } catch(NumberFormatException exInt) {
            try {
                Double.parseDouble(value);
                this.type = TableValueType.DOUBLE;
            } catch(NumberFormatException exDouble) {
                this.type = TableValueType.STRING;
            }
        }
    }

    /**
     * Returns the {@link TableColumn} that contains this TableValue object.
     *
     * @return the TableColumn that contains this value
     */
    public TableColumn getColumn() {
        return column;
    }

    /**
     * Sets the given {@link TableColumn} as column for this TableValue object.
     *
     * Attention: this doesn't add this TableValue to the items in the given TableColumn.
     * This has to be done separately, for example using {@link TableColumn#addValue(TableValue)}.
     *
     * @param column  the TableColumn that contains this value
     */
    private void setColumn(TableColumn column) {
        if(column != null) {
            this.column = column;
        } else {
            LOGGER.error("Can't add the TableValue to a <null> TableColumn");
            throw new NullPointerException("Can't add the TableValue to a <null> TableColumn");
        }
    }

    /**
     * Returns the {@link TableRow} that contains this TableValue object.
     *
     * @return the TableRow that contains this value
     */
    public TableRow getRow() {
        return row;
    }

    /**
     * Sets the given {@link TableRow} as row for this TableValue object.
     *
     * Attention: this doesn't add this TableValue to the items in the given TableRow.
     * This has to be done separately, for example using {@link TableRow#addValue(TableValue)}.
     *
     * @param row  the TableRow that contains this value
     */
    private void setRow(TableRow row) {
        if(row != null) {
            this.row = row;
        } else {
            LOGGER.error("Can't add the TableValue to a <null> TableRow");
            throw new NullPointerException("Can't add the TableValue to a <null> TableRow");
        }
    }

    void removeFromTable() {
        column = null;
        row = null;
    }

    @Override
    public boolean equals(Object o) {
        if(this == o) {
            return true;
        }
        if(o == null || getClass() != o.getClass()) {
            return false;
        }
        TableValue that = (TableValue) o;
        return  Objects.equals(value, that.value) &&
                Objects.equals(type, that.type) &&
                Objects.equals(column, that.column) &&
                Objects.equals(row, that.row);
    }

    @Override
    public int hashCode() {
        return Objects.hash(value, type, column, row);
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this).add("column", column).add("row", row)
                .add("value", value).add("type", type).toString();
    }

}
