package inspector.jqcml.model;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import java.util.Objects;

/**
 * Represents a controlled vocabulary.
 * 
 * Controlled vocabularies are used to unambiguously define each parameter.
 */
// JAXB
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name="cv")
@XmlType(name="CVType")
// JPA
@Entity
@Table(name="cv")
public class Cv {

    /** read-only qcDB primary key; generated by JPA */
    // JAXB
    @XmlTransient
    // JPA
    @Id
    @TableGenerator(name="pk_cv", table="pk_sequence", pkColumnName="name",
            valueColumnName="seq", pkColumnValue="cv", allocationSize=1)
    @GeneratedValue(strategy=GenerationType.TABLE, generator="pk_cv")
    @Column(name="CV_ID_PK")
    private int primaryKey;

    /** the full name of the controlled vocabulary */
    // JAXB
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name="token")
    @XmlAttribute(required=true)
    // JPA
    @Column(name="full_name", length=255)
    private String fullName;
    /** the version number of the particular cv version */
    // JAXB
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name="token")
    @XmlAttribute
    // JPA
    @Column(name="version", length=255)
    private String version;
    /** the uri specifying the location of the controlled vocabulary */
    // JAXB
    @XmlSchemaType(name="anyURI")
    @XmlAttribute(required=true)
    // JPA
    @Column(name="uri", length=255)
    private String uri;
    /** a unique identifier, used by other elements to refer to this cv */
    // JAXB
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name="ID")
    @XmlID
    @XmlAttribute(name="ID", required=true)
    // JPA
    @Column(name="id", length=255, unique=true)
    private String id;

    /**
     * Constructs a new empty representation of a controlled vocabulary.
     */
    public Cv() {
        // do nothing
    }

    /**
     * Constructs a new representation of a controlled vocabulary.
     *
     * @param fullName  The full name of the controlled vocabulary
     * @param uri  The uri specifying the location of the controlled vocabulary
     * @param id  A unique identifier that will be used by other elements to refer to this cv
     */
    public Cv(String fullName, String uri, String id) {
        setFullName(fullName);
        setUri(uri);
        setId(id);
    }

    /**
     * Returns the primary key of this Cv object used in the qcDB.
     *
     * The primary key is (generally) read-only; the qcDB implementation will generate a suitable primary key when required.
     * If this Cv object isn't connected to a certain qcDB, the primary key will not be set.
     *
     * @return The primary key of this Cv object
     */
    public int getPrimaryKey() {
        return primaryKey;
    }

    /**
     * Sets the primary key of this Cv object to be used in the qcDB.
     *
     * Generally the qcDB implementation will generate a suitable primary key when required.
     * However, sometimes in order to merge this Cv to existing entries in the qcDB, an existing primary key can be set.
     *
     * @param key  The primary key of this Cv object
     */
    public void setPrimaryKey(int key) {
        this.primaryKey = key;
    }

    /**
     * Returns the full name of this Cv object.
     *
     * @return The full name of this Cv object
     */
    public String getFullName() {
        return fullName;
    }

    /**
     * Sets the full name of this Cv object.
     *
     * @param fullName  The full name of this Cv object
     */
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    /**
     * Returns the version of this Cv object.
     *
     * @return  The version of this Cv object
     */
    public String getVersion() {
        return version;
    }

    /**
     * Sets the version of this Cv object.
     *
     * @param version  The version of this Cv object
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Returns the uri specifying the location of the controlled vocabulary.
     *
     * @return  The uri of this Cv object
     */
    public String getUri() {
        return uri;
    }

    /**
     * Sets the uri specifying the location of the controlled vocabulary.
     *
     * @param uri  The uri of this Cv object
     */
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Returns the unique identifier, used by other elements to refer to this Cv object.
     *
     * @return  The ID of this Cv object
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the unique identifier, used by other elements to refer to this Cv object.
     *
     * @param id  The ID of this Cv object
     */
    public void setId(String id) {
        this.id = id;
    }

    @Override
    public boolean equals(Object o) {
        if(this == o) {
            return true;
        }
        if(!(o instanceof Cv)) {
            return false;
        }
        Cv cv = (Cv) o;
        return  Objects.equals(fullName, cv.fullName) &&
                Objects.equals(version, cv.version) &&
                Objects.equals(uri, cv.uri) &&
                Objects.equals(id, cv.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fullName, version, uri, id);
    }

    @Override
    public String toString() {
        return "cv <ID=\"" + getId() + "\", fullname=\"" + getFullName() + "\">";
    }

}
