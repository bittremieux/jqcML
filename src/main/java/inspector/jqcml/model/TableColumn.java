package inspector.jqcml.model;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.persistence.Transient;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Represents header information for a single column in a {@link TableAttachment}.
 */
@Entity
@Table(name="table_column")
public class TableColumn {
	
	@Transient
	private static final Logger logger = LogManager.getLogger(TableColumn.class);

	/** read-only qcDB primary key; generated by JPA */
	@Id
	@TableGenerator(name="pk_column", table="pk_sequence", pkColumnName="name",
			valueColumnName="seq", pkColumnValue="table_column", allocationSize=1)
	@GeneratedValue(strategy=GenerationType.TABLE, generator="pk_column")
	@Column(name="TC_ID_PK")
	private int primaryKey;
	
	/** either an arbitrary name, or a (textual) reference to a term in a cv. */
	@Column(name="name")
	private String column;
	
	/** inverse part of the bi-directional relationship with {@link TableAttachment} */
	@ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="TA_ID_FK", referencedColumnName="TA_ID_PK")
    private TableAttachment parentTable;
	
	/** a set of all {@link TableValue} in the table associated with this column */
	@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER, mappedBy="column")
	private Set<TableValue> values;
	
	/**
     * Constructs a new empty TableColumn object.
     */
	public TableColumn() {
		values = new HashSet<>();
	}
	
	/**
	 * Constructs a new TableColumn object with the given column name.
	 * 
	 * @param column  either an arbitrary name for this column, or a (textual) reference to a term in a cv
	 */
	public TableColumn(String column) {
		this();
		
		setColumn(column);
	}

	/**
	 * Returns the name of the column.
	 * 
	 * @return  the name of the column
	 */
	public String getColumn() {
		return column;
	}

	/**
	 * Sets the name of the column.
	 * This is either an arbitrary name, or a (textual) reference to a term in a cv.
	 * 
	 * @param column  the name of the column
	 */
	public void setColumn(String column) {
		this.column = column;
	}
	
	/**
	 * Returns a set of all {@link TableValue} associated with this column.
	 * 
	 * @return  a set of all values associated with this column
	 */
	public Set<TableValue> getValues() {
		return values;
	}
	
	/**
	 * Adds a {@link TableValue} to this column.
	 * 
	 * @param value  a new value to be associated with this column
	 */
	public void addValue(TableValue value) {
		if(value != null) {
			value.setColumn(this);	// add the bi-directional relationship
			values.add(value);
		}
		else {
			logger.error("Can't add <null> TableValue to a TableColumn object");
			throw new NullPointerException("Can't add <null> TableValue");
		}
	}
	
	/**
	 * Removes the given {@link TableValue} from this column.
	 * 
	 * Attention: the TableValue contains a link to this column as well.
	 * This link isn't changed and should be changed afterwards (if required).
	 * 
	 * @param value  the value to be removed from this column
	 */
	public void removeValue(TableValue value) {
		if(value != null) {
			values.remove(value);
		}
	}
	
	/**
	 * Returns the parent {@link TableAttachment} object for which this TableColumn object contains header information.
	 * 
	 * @param parent  the parent TableAttachment object
	 */
	public void setParentTable(TableAttachment parent) {
		this.parentTable = parent;
	}
	
	@Override
	public boolean equals(Object other) {
		if(other == null)
			return false;
		else if(other == this)
			return true;
		else if(!(other instanceof TableColumn))
			return false;
		else {
			TableColumn tcOther = (TableColumn) other;
			return getColumn().equals(tcOther.getColumn());
		}
	}
	
	@Override
	public String toString() {
		return "TableColumn <" + getColumn() + ">";
	}
}
