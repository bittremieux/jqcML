package inspector.jqcml.model;

/*
 * #%L
 * jqcML
 * %%
 * Copyright (C) 2013 - 2015 InSPECtor
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import com.google.common.base.MoreObjects;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

/**
 * Represents header information for a single column in a {@link TableAttachment}.
 */
@Entity
@Table(name="table_column")
public class TableColumn {

    @Transient
    private static final Logger LOGGER = LogManager.getLogger(TableColumn.class);

    /** read-only qcDB primary key; generated by JPA */
    @Id
    @TableGenerator(name="pk_column", table="pk_sequence", pkColumnName="name",
            valueColumnName="seq", pkColumnValue="table_column", allocationSize=1)
    @GeneratedValue(strategy=GenerationType.TABLE, generator="pk_column")
    @Column(name="TC_ID_PK")
    private int primaryKey;

    /** either an arbitrary name, or a (textual) reference to a term in a cv. */
    @Column(name="name")
    private String column;

    /** inverse part of the bi-directional relationship with {@link TableAttachment} */
    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="TA_ID_FK", referencedColumnName="TA_ID_PK")
    private TableAttachment parentTable;

    /** a set of all {@link TableValue} in the table associated with this column */
    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER, mappedBy="column")
    private Set<TableValue> values;

    /**
     * Constructs a new empty TableColumn object.
     */
    protected TableColumn() {
        values = new HashSet<>();
    }

    /**
     * Constructs a new TableColumn object with the given column name.
     *
     * @param column  either an arbitrary name for this column, or a (textual) reference to a term in a cv, not {@code null}
     */
    public TableColumn(String column) {
        this();

        setColumn(column);
    }

    /**
     * Returns the name of the column.
     *
     * @return  the name of the column
     */
    public String getColumn() {
        return column;
    }

    /**
     * Sets the name of the column.
     * This is either an arbitrary name, or a (textual) reference to a term in a cv.
     *
     * @param column  the name of the column, not {@code null}
     */
    private void setColumn(String column) {
        if(column != null) {
            this.column = column;
        } else {
            LOGGER.error("The column is not allowed to be <null>");
            throw new NullPointerException("The column is not allowed to be <null>");
        }
    }

    /**
     * Returns a set of all {@link TableValue} associated with this column.
     *
     * @return  a set of all values associated with this column
     */
    public Set<TableValue> getValues() {
        return values;
    }

    /**
     * Adds a {@link TableValue} to this column.
     *
     * @param value  a new value to be associated with this column
     */
    public void addValue(TableValue value) {
        if(value != null) {
            values.add(value);
        } else {
            LOGGER.error("Can't add <null> TableValue to a TableColumn object");
            throw new NullPointerException("Can't add <null> TableValue");
        }
    }

    /**
     * Removes the given {@link TableValue} from this column.
     *
     * Attention: the TableValue contains a link to this column as well.
     * This link isn't changed and should be changed afterwards (if required).
     *
     * @param value  the value to be removed from this column
     */
    public void removeValue(TableValue value) {
        if(value != null) {
            values.remove(value);
        }
    }

    /**
     * Returns the parent {@link TableAttachment} object for which this TableColumn object contains header information.
     *
     * @param parent  the parent TableAttachment object
     */
    public void setParentTable(TableAttachment parent) {
        this.parentTable = parent;
    }

    @Override
    public boolean equals(Object o) {
        if(this == o) {
            return true;
        }
        if(o == null || getClass() != o.getClass()) {
            return false;
        }
        TableColumn that = (TableColumn) o;
        return Objects.equals(column, that.column);
    }

    @Override
    public int hashCode() {
        return Objects.hash(column);
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this).add("column", column).toString();
    }
}
